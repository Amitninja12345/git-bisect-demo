#!/usr/bin/env bash

# In this script, do whatever you do to build and test your project.

assert() {
  if $@; then
    printf '  %s  %b%s%b\n' 'üçª' '\e[1;32m' "$*" '\e[0m'
    return 0
  fi

  printf '  %s  %b%s%b\n' 'üí©' '\e[1;31m' "$*" '\e[0m'
  return 1
}

smoke-test() {
  printf '%s\n' "${FUNCNAME[0]}"
  assert test 1 = 1
}

loads-calculator-test() {
  printf '%s\n' "${FUNCNAME[0]}"
  source ./calculator
  assert test $? = 0
}

adds-operands-test() {
  printf '%s\n' "${FUNCNAME[0]}"
  source ./calculator
  add 40 2
  assert test $? = 42
}

subtracts-operands-test() {
  printf '%s\n' "${FUNCNAME[0]}"
  source ./calculator
  subtract 40 2
  assert test $? = 38
}

divides-operands-test() {
  printf '%s\n' "${FUNCNAME[0]}"
  source ./calculator
  divide 40 2
  assert test $? = 20
}

multiplies-operands-test() {
  printf '%s\n' "${FUNCNAME[0]}"
  source ./calculator
  multiply 40 2
  assert test $? = 80
}

# Call all *-test functions.
any_failed=0
for test in $(compgen -A function); do
  if [[ "$test" != *-test ]]; then
    continue
  fi

  $test

  # Sum up exit codes.
  any_failed=$((any_failed + $?))
done

if [[ "$any_failed" -eq 0 ]]; then
  printf '\n%s  The build was %bsuccessful%b\n' 'üç∫' '\e[1;32m' '\e[0m'
  exit 0
else
  printf '\n%s  The build has %bfailed%b\n' 'üí©' '\e[1;31m' '\e[0m'
  exit 1
fi
